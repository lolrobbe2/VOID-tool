@using FoxholeBot.types
@using Microsoft.JSInterop
@using System.Net.Http
@using System.Net.Http.Json
@using foxhole_void_bot.src.frontend.Pages.Components.Arty.WindSelection.Button
@inject IJSRuntime JS
@inject HttpClient Client

<div class="wind-flags">
    @if (windFlags is null)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (var kvp in windFlags)
        {
            <WindButton Src="@kvp.Value" Strenght="@kvp.Key" Selected="@selected" OnClick="HandleClick" />
        }
    }
</div>

@code {
    #nullable enable
    private Dictionary<WindStrenght, string>? windFlags;
    private WindStrenght selected = WindStrenght.CALM;
    [Parameter]
    public EventCallback<WindStrenght> OnWindSelected { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) 
        {
            HttpResponseMessage response = await Client.GetAsync("/api/Assets/Wind/Flag");
            response.EnsureSuccessStatusCode();
            string[] gifs = await response.Content.ReadFromJsonAsync<string[]>();

            if (gifs is null)
                return;

            windFlags = Enum.GetValues<WindStrenght>()
                            .Zip(gifs, (strength, gif) => new { strength, gif })
                            .ToDictionary(x => x.strength, x => x.gif);
            StateHasChanged();
        }
    }

    private async Task HandleClick(WindStrenght strength)
    {
        selected = strength;
        if (OnWindSelected.HasDelegate)
        {
            await OnWindSelected.InvokeAsync(strength);
        }
    }

}
