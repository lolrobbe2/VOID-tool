@using FoxholeBot.types
@using Microsoft.JSInterop
@using System.Net.Http
@using System.Net.Http.Json
@using foxhole_void_bot.src.frontend.Pages.Components.Arty.WindSelection.Button
@inject IJSRuntime JS
@inject HttpClient Client

<div class="wind-socks">
    @if (windSocks is null)
    {
            <p>Loading...</p>
    }
    else
    {
        @foreach (var kvp in windSocks)
        {
            <WindButton Src="@kvp.Value" Selected="@selected" Strenght="@kvp.Key" OnClick="HandleClick" />
        }
    }
</div>

@code {
    private Dictionary<WindStrenght, string>? windSocks;
    private WindStrenght selected = WindStrenght.CALM;

    [Parameter]
    public EventCallback<WindStrenght> OnWindSelected { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) 
        {
            HttpResponseMessage response = await Client.GetAsync("api/Assets/Wind/Sock");
            response.EnsureSuccessStatusCode();
            string[] gifs = await response.Content.ReadFromJsonAsync<string[]>();
            if (gifs is null || gifs.Length == 0)
                return;

            windSocks = Enum.GetValues<WindStrenght>()
                            .Take(gifs.Length) // only map as many gifs as we got (4)
                            .Zip(gifs, (strength, gif) => new { strength, gif })
                            .ToDictionary(x => x.strength, x => x.gif);
            StateHasChanged();

        }
    }

    private async Task HandleClick(WindStrenght strength)
    {
        selected = strength;

        if (OnWindSelected.HasDelegate)
        {
            await OnWindSelected.InvokeAsync(strength);
        }
    }
}
