@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS

<div class="map-selector">
    <div class="map-sidebar">
        <input type="text" value="@searchTerm" oninput="@OnSearchInput" class="search-bar" />
        <div class="button-container">
            <div class="button-list">
                @foreach (var map in filteredEntries)
                {
                    <button class="map-button" @onclick="(() => HandleMapClick(map.Uri, map.Name))">@map.Name</button>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private class MapEntry
    {
        public string Name { get; set; } = "";
        public string Uri { get; set; } = "";
    }
    [Parameter]
    public EventCallback<(string Uri, string Name)> OnMapSelected { get; set; }
    private string searchTerm = string.Empty;
    private List<MapEntry> mapEntries = new();
    private List<MapEntry> filteredEntries = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var urls = await JS.InvokeAsync<string[]>("fetchMapUrls");

            mapEntries = urls.Select(url =>
            {
                var filename = System.IO.Path.GetFileName(url);
                var trimmed = filename.Replace("Map", "").Replace("Hex.webp", "").Replace(".webp", "");

                var words = System.Text.RegularExpressions.Regex
                    .Matches(trimmed, @"[A-Z][a-z]*")
                    .Select(m => m.Value.ToLower());

                var name = string.Join(" ", words);

                return new MapEntry { Name = name, Uri = url };
            }).ToList();
            filteredEntries = mapEntries;
            StateHasChanged();

        }

    }

    private void UpdateFilteredMaps()
    {
        filteredEntries = string.IsNullOrWhiteSpace(searchTerm)
            ? mapEntries
            : mapEntries.Where(entry => entry.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }


    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        UpdateFilteredMaps();
    }

    private void HandleMapClick(string uri, string name)
    {
        OnMapSelected.InvokeAsync((uri, name));
    }
}

<script>
    window.fetchMapUrls = async function () {
        try {
            const response = await fetch('/api/Assets/Map');
            if (!response.ok) throw new Error('Failed to fetch map URLs');
            return await response.json();
        } catch (error) {
            console.error('Error fetching map URLs:', error);
            return [];
        }
    };
</script>
