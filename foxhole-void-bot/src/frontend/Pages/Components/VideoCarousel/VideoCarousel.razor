@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@using System.Timers
@using Microsoft.JSInterop

@inject IJSRuntime JS
@implements IDisposable
@namespace FoxholeBot.Components

<div id="videoBackgroundCarousel">
    @if (VideoUrls.Count > 0)
    {
        var videoUrl = VideoUrls[currentIndex];
        <video @ref="videoRef" autoplay loop playsinline preload="auto">
            <source src="@videoUrl" type="video/mp4" />
            Your browser does not support the video tag.
        </video>
    }
</div>

<script>
    window.reloadAndPlayVideo = function (videoElement) {
        if (videoElement) {
            videoElement.muted = true;
            videoElement.load();
            videoElement.play().catch(err => console.warn("Autoplay failed:", err));
        }
    };
</script>

@code {
    [Parameter]
    public List<string> VideoUrls { get; set; } = new();

    private int currentIndex = 0;
    private Timer? carouselTimer;
    private ElementReference videoRef;
    private bool hasInitialized = false;

    protected override void OnInitialized()
    {
        carouselTimer = new Timer(7000);
        carouselTimer.Elapsed += async (_, __) =>
        {
            currentIndex = (currentIndex + 1) % VideoUrls.Count;
            Console.WriteLine($"Switching to video index: {currentIndex}");

            await InvokeAsync(async () =>
            {
                StateHasChanged(); // Trigger re-render
                await Task.Delay(50); // Let DOM update
                await JS.InvokeVoidAsync("reloadAndPlayVideo", videoRef);
            });
        };
        carouselTimer.AutoReset = true;
        carouselTimer.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;
            await Task.Delay(100); // Give Blazor time to hydrate the DOM
            await JS.InvokeVoidAsync("reloadAndPlayVideo", videoRef);
        }
    }


    public void Dispose()
    {
        carouselTimer?.Stop();
        carouselTimer?.Dispose();
    }
}
