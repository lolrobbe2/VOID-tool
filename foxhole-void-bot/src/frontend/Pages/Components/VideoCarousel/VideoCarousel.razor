@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@using System.Timers
@using Microsoft.JSInterop

@inject IJSRuntime JS
@implements IDisposable
@namespace FoxholeBot.Components

<div id="videoBackgroundCarousel">
    @if (VideoUrls.Length > 0)
    {
        var videoUrl = VideoUrls[currentIndex];
        <video @ref="videoRef" autoplay loop playsinline preload="auto">
            <source src="@videoUrl" type="video/mp4" />
            Your browser does not support the video tag.
        </video>
    }
</div>


@code {
    #nullable enable
    [Parameter]
    public string[] VideoUrls { get; set; } = [];

    private int currentIndex = 0;
    private Timer? carouselTimer;
    private ElementReference videoRef;
    private bool hasInitialized = false;
    private Random random = new Random();
    protected override void OnInitialized()
    {
        carouselTimer = new Timer(7000);
        carouselTimer.Elapsed += async (_, __) =>
        {
            currentIndex = (currentIndex + 1) % VideoUrls.Length;
            Console.WriteLine($"Switching to video index: {currentIndex}");

            await InvokeAsync(async () =>
            {
                StateHasChanged(); // Trigger re-render
                await Task.Delay(50); // Let DOM update
                var offset = random.Next(0, 10); // Random offset between 1–5 seconds
                /* the video needs to be reloaded before playing */
                await JS.InvokeVoidAsync("reloadAndPlayVideo", videoRef,offset);
                carouselTimer.Interval = random.Next(10000, 20000);
            });
        };
        carouselTimer.AutoReset = true;
        carouselTimer.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;
            await Task.Delay(100); // Give Blazor time to hydrate the DOM
                                   // Inject the JS function dynamically (only once)
            string jsCode = @"
            window.reloadAndPlayVideo = function (videoElement, offsetSeconds) {
                if (videoElement) {
                    videoElement.muted = true;
                    videoElement.currentTime = offsetSeconds || 0;
                    videoElement.load();
                    videoElement.play().catch(err => console.warn('Autoplay failed:', err));
                }
            };
        ";

            await JS.InvokeVoidAsync("eval", jsCode);

            // Call the injected JS function
            await JS.InvokeVoidAsync("reloadAndPlayVideo", videoRef, 0); // Start at 0 seconds
        }
    }
    private async Task InjectVideoScriptAsync()
    {
        string jsCode = @"
            window.reloadAndPlayVideo = function (videoElement, offsetSeconds) {
                if (videoElement) {
                    videoElement.muted = true;
                    videoElement.currentTime = offsetSeconds || 0;
                    videoElement.load();
                    videoElement.play().catch(err => console.warn('Autoplay failed:', err));
                }
            };
        ";

        await JS.InvokeVoidAsync("eval", jsCode);
    }

    private async Task ReloadAndPlayVideoAsync(ElementReference videoElement, double offsetSeconds)
    {
        await JS.InvokeVoidAsync("reloadAndPlayVideo", videoElement, offsetSeconds);
    }

    public void Dispose()
    {
        carouselTimer?.Stop();
        carouselTimer?.Dispose();
    }
}
